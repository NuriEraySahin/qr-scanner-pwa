{"version":3,"sources":["components/Navigation/Navigation.js","components/QrCodeReader/QrCodeReader.js","components/QrCodeReader/LecacyQrCodeReader.js","App.js","serviceWorker.js","helpers/index.js","index.js"],"names":["Navigation","React","createElement","NavLink","exact","to","QrCodeReader","_Component","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","result","handleScan","data","setState","handleError","err","console","error","_inherits","_createClass","key","value","className","QrReader","delay","onError","onScan","Component","LecacyQrCodeReader","imageLoaded","qrReader","createRef","openImageDialog","current","ref","onImageLoad","legacyMode","onClick","App","Router","Fragment","Switch","Route","path","component","Redirect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","userAgent","toLowerCase","test","isIos","document","getElementById","href","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.142be341.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <NavLink exact to=\"/qr-reader-pwa\">\r\n          Default\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink exact to=\"/qr-reader-pwa/legacy\">\r\n          Legacy\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\n\r\nimport './QrCodeReader.css';\r\n\r\nclass QrCodeReader extends Component {\r\n  state = {\r\n    result: 'No result',\r\n  };\r\n\r\n  handleScan = (data) => {\r\n    if (data) {\r\n      this.setState({\r\n        result: data,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n\r\n  render() {\r\n    const { result } = this.state;\r\n  \r\n    return (\r\n      <div className=\"qr-reader-wrapper\">\r\n        <QrReader\r\n          className=\"qr-reader\"\r\n          delay={300}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n        />\r\n        <p>{result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QrCodeReader;\r\n","import React, { Component } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\n\r\nimport './QrCodeReader.css';\r\n\r\nclass LecacyQrCodeReader extends Component {\r\n  state = {\r\n    result: 'No result',\r\n    imageLoaded: false,\r\n  };\r\n\r\n  qrReader = React.createRef();\r\n\r\n  handleScan = (data) => {\r\n    if (data) {\r\n      this.setState({\r\n        result: data,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n\r\n  openImageDialog = () => {\r\n    this.qrReader.current.openImageDialog();\r\n  };\r\n\r\n  render() {\r\n    const { result } = this.state;\r\n  \r\n    return (\r\n      <div className=\"qr-reader-wrapper\">\r\n        <QrReader\r\n          ref={this.qrReader}\r\n          className=\"qr-reader\"\r\n          delay={300}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          onImageLoad={this.onImageLoad}\r\n          legacyMode\r\n        />\r\n        <button onClick={this.openImageDialog}>Find QR Code</button>\r\n        <p>{result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LecacyQrCodeReader;\r\n","import React, { Fragment } from 'react';\r\nimport {\r\n  Route,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\n\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport QrCodeReader from './components/QrCodeReader/QrCodeReader';\r\nimport LecacyQrCodeReader from './components/QrCodeReader/LecacyQrCodeReader';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Router>\r\n      <Fragment>\r\n        <header>\r\n          <Navigation />\r\n        </header>\r\n        <main>\r\n          <Switch>\r\n            <Route exact path=\"/qr-reader-pwa\" component={QrCodeReader} />\r\n            <Route\r\n              exact\r\n              path=\"/qr-reader-pwa/legacy\"\r\n              component={LecacyQrCodeReader}\r\n            />\r\n            <Redirect to=\"/qr-reader-pwa\" />\r\n          </Switch>\r\n        </main>\r\n      </Fragment>\r\n    </Router>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const isIos = () => {\r\n  const userAgent = window.navigator.userAgent.toLowerCase();\r\n  return /iphone|ipad|ipod/.test(userAgent);\r\n};\r\n\r\nexport const isInStandaloneMode = () =>\r\n  'standalone' in window.navigator && window.navigator.standalone;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { isIos } from './helpers';\r\n\r\nif (isIos()) {\r\n  document.getElementById('manifest').href = 'ios-manifest.json';\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}